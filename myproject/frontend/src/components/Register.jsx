import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { register } from "../api/auth";
import { isAuthenticated } from "../utils/auth";
import InputMask from "react-input-mask";
import Header from "../components/Header"; 

function Register() {
  const [error, setError] = useState(null);
  const navigate = useNavigate();
  const [userData, setUserData] = useState({
    firstName: "",
    lastName: "",
    middleName: "",
    login: "",
    email: "",
    phone: "",
    password: "",
    confirmPassword: "",
    agreeToTerms: false,
  });

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setUserData({ ...userData, [name]: value });
  };

  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  useEffect(() => {
    if (isAuthenticated()) {
      navigate("/"); // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    }
  }, [navigate]);

  const validateFields = () => {
    const {
      firstName,
      lastName,
      middleName,
      login,
      phone,
      password,
      confirmPassword,
      agreeToTerms,
    } = userData;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –§–ò–û –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—É
    const cyrillicRegex = /^[–ê-–Ø–∞-—è–Å—ë\s-]+$/;
    if (
      !cyrillicRegex.test(firstName) ||
      !cyrillicRegex.test(lastName) ||
      !cyrillicRegex.test(middleName)
    ) {
      setError("–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü—É.");
      return false;
    }

    // –õ–æ–≥–∏–Ω —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
    const latinRegex = /^[A-Za-z0-9]+$/;
    if (!latinRegex.test(login)) {
      setError("–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã.");
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    const passwordRegex =
      /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{8,}$/;
    if (!passwordRegex.test(password)) {
      setError(
        "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –æ–¥–Ω—É –±—É–∫–≤—É, –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É –∏ –æ–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª."
      );
      return false;
    }
    if (password !== confirmPassword) {
      setError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.");
      return false;
    }
    if (!agreeToTerms) {
      setError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö.");
      return false;
    }
    return true;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(null);

    if (!validateFields()) return;

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const finalData = {
      username: userData.login, // –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º login –≤ username
      email: userData.email || "",
      password: userData.password,
      confirm_password: userData.confirmPassword, // –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º confirmPassword
      first_name: userData.firstName, // –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º firstName
      last_name: userData.lastName, // –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º lastName
      middle_name: userData.middleName, // –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º middleName
      phone: userData.phone,
      agree_to_terms: userData.agreeToTerms, // –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º agreeToTerms
    };

    try {
      await register(finalData);
      navigate("/login");
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err);

      if (err.response && err.response.data) {
        const data = err.response.data;

        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —Å–æ–æ–±—â–∞–µ—Ç –æ–± –æ—à–∏–±–∫–µ –≤ –ø–æ–ª–µ username:
        if (data.username && Array.isArray(data.username)) {
          setError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
          return;
        }

        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —Å–æ–æ–±—â–∞–µ—Ç –æ–± –æ—à–∏–±–∫–µ –≤ –ø–æ–ª–µ email:
        if (data.email && Array.isArray(data.email)) {
          setError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
          return;
        }
      }

      setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.");
    }
  };

  return (
    <>
      <Header />
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-blue-50 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4 pt-15">
        <div className="relative w-full max-w-xl">
          <div className="absolute -inset-2 bg-blue-100 dark:bg-blue-900/20 blur-lg opacity-30 rounded-3xl"></div>

          <div className="bg-white dark:bg-gray-800 p-8 rounded-2xl shadow-xl relative transition-all duration-300 hover:shadow-2xl">
            <h1 className="text-3xl font-bold text-gray-800 dark:text-white mb-8 text-center">
              üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            </h1>

            {error && (
              <div className="bg-red-100 dark:bg-red-900/20 text-red-600 dark:text-red-300 px-4 py-3 rounded-xl mb-6 text-sm flex items-center">
                <span className="mr-2">‚ö†Ô∏è</span>
                {error}
              </div>
            )}

            <form
              onSubmit={handleSubmit}
              className="grid grid-cols-1 md:grid-cols-2 gap-6"
            >
              {/* –§–∞–º–∏–ª–∏—è */}
              <div>
                <label className="block text-gray-700 dark:text-gray-300 mb-3 font-medium">
                  –§–∞–º–∏–ª–∏—è
                </label>
                <input
                  type="text"
                  name="lastName"
                  value={userData.lastName}
                  onChange={handleInputChange}
                  required
                  className="w-full px-5 py-3 border-2 border-gray-200 dark:border-gray-700 rounded-xl focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 dark:focus:ring-blue-800/50 bg-transparent transition-all text-gray-800 dark:text-white"
                />
              </div>

              {/* –ò–º—è */}
              <div>
                <label className="block text-gray-700 dark:text-gray-300 mb-3 font-medium">
                  –ò–º—è
                </label>
                <input
                  type="text"
                  name="firstName"
                  value={userData.firstName}
                  onChange={handleInputChange}
                  required
                  className="w-full px-5 py-3 border-2 border-gray-200 dark:border-gray-700 rounded-xl focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 dark:focus:ring-blue-800/50 bg-transparent transition-all text-gray-800 dark:text-white"
                />
              </div>

              {/* –û—Ç—á–µ—Å—Ç–≤–æ */}
              <div>
                <label className="block text-gray-700 dark:text-gray-300 mb-3 font-medium">
                  –û—Ç—á–µ—Å—Ç–≤–æ
                </label>
                <input
                  type="text"
                  name="middleName"
                  value={userData.middleName}
                  onChange={handleInputChange}
                  className="w-full px-5 py-3 border-2 border-gray-200 dark:border-gray-700 rounded-xl focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 dark:focus:ring-blue-800/50 bg-transparent transition-all text-gray-800 dark:text-white"
                />
              </div>

              {/* –õ–æ–≥–∏–Ω */}
              <div>
                <label className="block text-gray-700 dark:text-gray-300 mb-3 font-medium">
                  –õ–æ–≥–∏–Ω
                </label>
                <input
                  type="text"
                  name="login"
                  value={userData.login}
                  onChange={handleInputChange}
                  required
                  className="w-full px-5 py-3 border-2 border-gray-200 dark:border-gray-700 rounded-xl focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 dark:focus:ring-blue-800/50 bg-transparent transition-all text-gray-800 dark:text-white"
                />
              </div>

              {/* Email */}
              <div>
                <label className="block text-gray-700 dark:text-gray-300 mb-3 font-medium">
                  Email
                </label>
                <input
                  type="email"
                  name="email"
                  value={userData.email}
                  onChange={handleInputChange}
                  required
                  className="w-full px-5 py-3 border-2 border-gray-200 dark:border-gray-700 rounded-xl focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 dark:focus:ring-blue-800/50 bg-transparent transition-all text-gray-800 dark:text-white"
                />
              </div>

              {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
              <div>
                <label className="block text-gray-700 dark:text-gray-300 mb-3 font-medium">
                  –¢–µ–ª–µ—Ñ–æ–Ω
                </label>
                <InputMask
                  mask="+7 (999) 999-99-99"
                  name="phone"
                  value={userData.phone}
                  onChange={handleInputChange}
                  required
                  className="w-full px-5 py-3 border-2 border-gray-200 dark:border-gray-700 rounded-xl focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 dark:focus:ring-blue-800/50 bg-transparent transition-all text-gray-800 dark:text-white"
                />
              </div>

              {/* –ü–∞—Ä–æ–ª—å */}
              <div>
                <label className="block text-gray-700 dark:text-gray-300 mb-3 font-medium">
                  –ü–∞—Ä–æ–ª—å
                </label>
                <div className="relative">
                  <input
                    type={showPassword ? "text" : "password"}
                    name="password"
                    value={userData.password}
                    onChange={handleInputChange}
                    required
                    className="w-full px-5 py-3 border-2 border-gray-200 dark:border-gray-700 rounded-xl focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 dark:focus:ring-blue-800/50 bg-transparent transition-all pr-16 text-gray-800 dark:text-white"
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-3 top-3.5 text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors"
                  >
                    {showPassword ? "–°–∫—Ä—ã—Ç—å" : "–ü–æ–∫–∞–∑–∞—Ç—å"}
                  </button>
                </div>
              </div>

              {/* –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è */}
              <div>
                <label className="block text-gray-700 dark:text-gray-300 mb-3 font-medium">
                  –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                </label>
                <div className="relative">
                  <input
                    type={showConfirmPassword ? "text" : "password"}
                    name="confirmPassword"
                    value={userData.confirmPassword}
                    onChange={handleInputChange}
                    required
                    className="w-full px-5 py-3 border-2 border-gray-200 dark:border-gray-700 rounded-xl focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-200 dark:focus:ring-blue-800/50 bg-transparent transition-all pr-16 text-gray-800 dark:text-white"
                  />
                  <button
                    type="button"
                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                    className="absolute right-3 top-3.5 text-sm text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 transition-colors"
                  >
                    {showConfirmPassword ? "–°–∫—Ä—ã—Ç—å" : "–ü–æ–∫–∞–∑–∞—Ç—å"}
                  </button>
                </div>
              </div>

              {/* –ß–µ–∫–±–æ–∫—Å —Å–æ–≥–ª–∞—Å–∏—è */}
              <div className="md:col-span-2">
                <label className="flex items-center space-x-3">
                  <input
                    type="checkbox"
                    name="agreeToTerms"
                    checked={userData.agreeToTerms}
                    onChange={(e) =>
                      setUserData({
                        ...userData,
                        agreeToTerms: e.target.checked,
                      })
                    }
                    className="w-5 h-5 text-blue-600 border-2 border-gray-300 rounded-md focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:checked:bg-blue-600"
                  />
                  <span className="text-gray-700 dark:text-gray-300 text-sm">
                    –°–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                  </span>
                </label>
              </div>

              {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
              <div className="md:col-span-2">
                <button
                  type="submit"
                  className="w-full bg-gradient-to-br from-blue-600 to-blue-500 text-white py-4 rounded-xl font-semibold hover:from-blue-700 hover:to-blue-600 transition-all duration-300 shadow-lg hover:shadow-blue-200/50 dark:hover:shadow-blue-900/30"
                >
                  –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                </button>
              </div>
            </form>

            <p className="mt-8 text-center text-gray-600 dark:text-gray-400 text-sm">
              –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?{" "}
              <a
                href="/login"
                className="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 font-medium underline-offset-4 hover:underline transition-all"
              >
                –í–æ–π—Ç–∏
              </a>
            </p>
          </div>
        </div>
      </div>
    </>
  );
}

export default Register;
